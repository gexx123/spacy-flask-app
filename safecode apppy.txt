import logging
import requests
from flask import Flask, request, jsonify
from spacy import Language
from spacy.tokens import Span
import spacy
from spacy.util import filter_spans

# Initialize logging
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)

# Load the spaCy model
nlp = spacy.load("en_core_web_sm")

# Define custom entity recognizer
@Language.component("custom_ner")
def custom_ner(doc):
    matcher = spacy.matcher.Matcher(nlp.vocab)
    matcher.add("SUBJECT", [[{"LOWER": "mathematics"}], [{"LOWER": "physics"}], [{"LOWER": "science"}]])
    matcher.add("BOOKTITLE", [[{"LOWER": "ncert"}], [{"LOWER": "toy joy"}]])
    matches = matcher(doc)
    spans = [Span(doc, start, end, label=nlp.vocab.strings[match_id]) for match_id, start, end in matches]
    logging.debug(f"Spans before filtering: {spans}")
    
    # Filter out overlapping spans
    filtered_spans = filter_spans(spans)
    logging.debug(f"Spans after filtering: {filtered_spans}")

    # Ensure there are no conflicts in spans
    try:
        doc.ents = list(doc.ents) + filtered_spans
    except ValueError as e:
        logging.error(f"Error setting entities: {e}")
        for span in filtered_spans:
            logging.error(f"Span: {span.text}, Start: {span.start}, End: {span.end}")
    return doc

# Add custom NER to pipeline
nlp.add_pipe("custom_ner", after="ner")

@app.route('/analyze', methods=['POST'])
def analyze():
    data = request.json
    text = data.get('text', '')
    doc = nlp(text)
    entities = [{"text": ent.text, "label": ent.label_} for ent in doc.ents]
    
    # Extract relevant fields from entities
    params = {}
    for ent in doc.ents:
        if ent.label_ in ["SUBJECT", "BOOKTITLE"]:
            params[ent.label_.lower()] = ent.text
    
    logging.debug(f"Querying MongoDB API with params: {params}")
    
    try:
        response = requests.get(
            'https://my-node-app43-2.onrender.com/api/questions',
            params=params
        )
        
        logging.debug(f"MongoDB API response: {response.json()}")
        
        if response.status_code == 200:
            return jsonify(response.json())
        else:
            return jsonify({"error": "Failed to query MongoDB API"}), 500
    except Exception as e:
        logging.error(f"Exception while querying MongoDB API: {e}")
        return jsonify({"error": "Failed to query MongoDB API"}), 500

if __name__ == '__main__':
    app.run(debug=True)
